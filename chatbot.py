# -*- coding: utf-8 -*-
# Import necessary libraries
import google.generativeai as gemini
import streamlit as st

# Set your API key
api_key = "AIzaSyBsKmiBNfOvZDiXVEfyyazb4CeEKBuE27w"  # Replace with your actual API key

# Configure the Gemini API
gemini.configure(api_key=api_key)

# Initialize the Gemini model
model = gemini.GenerativeModel("gemini-2.0-flash")

# Start a persistent chat session
chat = model.start_chat(
    history=[
        {"role": "user", "parts": "Hi, how are you?"},
        {"role": "model", "parts": "Hello! I'm here to assist you with anything you need. Feel free to ask me anything."},
    ]
)

# Function to handle user input and get model response
def chatbot_response(user_input):
    try:
        response = chat.send_message(user_input)
        return response.text
    except Exception as e:
        return f"Error: {str(e)}"

# Streamlit UI
# Sidebar for navigation
st.sidebar.title("Features")
page = st.sidebar.radio("Go to", ["Home", "About"])

# Home Page
if page == "Home":
    # st.set_page_config(layout="wide")
    st.title("üè´ Aadarsh Coaching Center - Chaksikander, Hajipur")
    st.markdown("""
        Welcome to the **Aadarsh Coaching Center**!  
        We are dedicated to providing quality education and guidance to help students achieve their academic goals.  
        Feel free to ask any questions or get assistance using our chatbot below.
    """)
    
    
    st.markdown("### Make a Question Paper for the Test")
    st.markdown("Generate customized question papers for your students using AI.")
  

   

    # User input
    user_input = st.text_input("Your Question", placeholder="e.g. What courses do you offer?")


    if st.button("Ask"):
     if user_input:
        response = chatbot_response(user_input)

        st.markdown(f"<div style='color: black; font-weight: bold;'>{response}</div>", unsafe_allow_html=True)
        if st.button("Copy Response"):
            st.session_state["copied_text"] = response
            st.success("Response copied to clipboard!")
    else:
        st.warning("Please enter a question.")

elif page == "About":
    st.title("About Aadarsh Coaching Center")
    st.markdown("""
        **Aadarsh Coaching Center** is located in **Chaksikander, Hajipur**.  
        We specialize in providing top-notch coaching for students from various academic backgrounds.  
        ### Why Choose Us?
        - Experienced and qualified faculty
        - Comprehensive study materials
        - Regular tests and performance analysis
        - Personalized attention to each student
        - Affordable fees
        ### Our Services
    
        - **Personalized Coaching**: Tailored coaching sessions to meet individual student needs.
        - **Online Classes**: Flexible online classes for students who prefer remote learning.
        - **Study Materials**: Comprehensive study materials and resources for all subjects.
        - **Mock Tests**: Regular mock tests to assess student performance and readiness.
        - **Doubt Clearing Sessions**: Dedicated sessions to clear student doubts and queries.
        ### Courses Offered:
        - Class 1 to 5 (All Subjects)
        - Class 6 to 12 (All Subjects)
        - Competitive Exams (JEE, NEET, etc.)
        - Spoken English and Personality Development
        ### Contact Us:
        - **Address**: Chaksikander, Hajipur, Bihar
        - **Phone**: +91-9876543210
        - **Email**: info@aadarshcoaching.com
    """)
    




    import streamlit as st

def main():
    
    st.title("AI Question Paper Generator")
    st.write("Generate customized question papers for your students using AI")
    st.sidebar.title("Question Paper Settings")
    language = st.sidebar.radio("Select Language:", ["English", "Hindi"])
    class_level = st.sidebar.selectbox("Select Class:", 
                                      ["Class 6", "Class 7", "Class 8", "Class 9", "Class 10", 
                                       "Class 11", "Class 12", "Undergraduate", "Postgraduate"])
    subjects = get_subjects_for_class(class_level)
    subject = st.sidebar.selectbox("Select Subject:", subjects)
    topic = st.sidebar.text_input("Enter Specific Topic (Optional):", "")
    question_type = st.sidebar.multiselect("Select Question Type(s):", 
                                          ["Objective (MCQ)", "Short Answer", "Long Answer", "Fill in the Blanks", 
                                           "True/False", "Match the Following", "Diagram Based"])
    question_counts = {}
    for q_type in question_type:
        question_counts[q_type] = st.sidebar.number_input(f"Number of {q_type} questions:", 
                                                         min_value=1, max_value=50, value=5)
    difficulty = st.sidebar.select_slider("Difficulty Level:", 
                                         options=["Easy", "Moderate", "Difficult", "Mixed"])
    time_limit = st.sidebar.slider("Time Limit (minutes):", 
                                  min_value=15, max_value=180, value=60, step=15)
    total_marks = st.sidebar.number_input("Total Marks:", min_value=10, max_value=100, value=50)
    additional_instructions = st.sidebar.text_area("Additional Instructions (Optional):", "")
    
    if st.sidebar.button("Generate Prompt"):
        prompt = generate_prompt(language, class_level, subject, topic, question_type, 
                               question_counts, difficulty, time_limit, total_marks, 
                               additional_instructions)
        
        # Display the generated prompt
        st.subheader("Generated Prompt")
        st.code(prompt, language="text")
        
        # Copy button
        st.button("Copy to Clipboard", on_click=lambda: st.write("Prompt copied to clipboard!"))
        
    with st.expander("View Sample Prompts"):
        display_sample_prompts(language)

def get_subjects_for_class(class_level):
    """Return appropriate subjects based on class level"""
    if "11" in class_level or "12" in class_level:
        return ["Physics", "Chemistry", "Biology", "Mathematics", "Computer Science", 
                "English", "Hindi", "History", "Geography", "Political Science", 
                "Economics", "Business Studies", "Accountancy", "Psychology", "Sociology"]
    elif "Undergraduate" in class_level or "Postgraduate" in class_level:
        return ["Physics", "Chemistry", "Biology", "Mathematics", "Computer Science", 
                "English Literature", "Hindi Literature", "History", "Geography", 
                "Political Science", "Economics", "Business Administration", 
                "Accounting", "Psychology", "Sociology", "Engineering", "Medicine"]
    else:
        return ["Science", "Mathematics", "English", "Hindi", "Social Studies", 
                "History", "Geography", "Computer Science", "General Knowledge"]

def generate_prompt(language, class_level, subject, topic, question_types, 
                   question_counts, difficulty, time_limit, total_marks, 
                   additional_instructions):
    """Generate a prompt based on the selected parameters"""
    
    # Start with the appropriate language template
    if language == "English":
        prompt = f"Create a {difficulty.lower()} level question paper for {class_level} {subject}"
    else:  # Hindi
        prompt = f"{class_level} ‡§ï‡•á ‡§≤‡§ø‡§è {subject} ‡§ï‡§æ {get_hindi_difficulty(difficulty)} ‡§∏‡•ç‡§§‡§∞ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç"
    if topic:
        if language == "English":
            prompt += f" on the topic of '{topic}'"
        else:
            prompt += f" ‡§µ‡§ø‡§∑‡§Ø '{topic}' ‡§™‡§∞"
    if language == "English":
        prompt += ". Include the following types of questions:\n"
    else:
        prompt += "‡•§ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç:\n"
    
    for q_type in question_types:
        count = question_counts[q_type]
        if language == "English":
            prompt += f"- {count} {q_type} questions\n"
        else:
            prompt += f"- {count} {get_hindi_question_type(q_type)}\n"
    if language == "English":
        prompt += f"\nThe question paper should be designed for {time_limit} minutes and for a total of {total_marks} marks."
    else:
        prompt += f"\n‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§§‡•ç‡§∞ {time_limit} ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§î‡§∞ ‡§ï‡•Å‡§≤ {total_marks} ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§"
    if additional_instructions:
        if language == "English":
            prompt += f"\n\nAdditional instructions: {additional_instructions}"
        else:
            prompt += f"\n\n‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂: {additional_instructions}"
    if language == "English":
        prompt += "\n\nPlease format the question paper properly with sections, question numbers, and marks distribution. Include clear instructions for students at the beginning."
    else:
        prompt += "\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§§‡•ç‡§∞ ‡§ï‡•ã ‡§ñ‡§Ç‡§°‡•ã‡§Ç, ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§Ö‡§Ç‡§ï ‡§µ‡§ø‡§§‡§∞‡§£ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§â‡§ö‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§"
    
    return prompt

def get_hindi_difficulty(difficulty):
    """Convert difficulty level to Hindi"""
    hindi_difficulty = {
        "Easy": "‡§Ü‡§∏‡§æ‡§®",
        "Moderate": "‡§Æ‡§ß‡•ç‡§Ø‡§Æ",
        "Difficult": "‡§ï‡§†‡§ø‡§®",
        "Mixed": "‡§Æ‡§ø‡§∂‡•ç‡§∞‡§ø‡§§"
    }
    return hindi_difficulty.get(difficulty, "‡§Æ‡§ß‡•ç‡§Ø‡§Æ")

def get_hindi_question_type(q_type):
    """Convert question type to Hindi"""
    hindi_types = {
        "Objective (MCQ)": "‡§¨‡§π‡•Å‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "Short Answer": "‡§≤‡§ò‡•Å ‡§â‡§§‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "Long Answer": "‡§¶‡•Ä‡§∞‡•ç‡§ò ‡§â‡§§‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "Fill in the Blanks": "‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡•ç‡§•‡§æ‡§® ‡§≠‡§∞‡•á‡§Ç",
        "True/False": "‡§∏‡§π‡•Ä/‡§ó‡§≤‡§§",
        "Match the Following": "‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§ï‡§æ ‡§Æ‡§ø‡§≤‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç",
        "Diagram Based": "‡§ö‡§ø‡§§‡•ç‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®"
    }
    return hindi_types.get(q_type, q_type)

def display_sample_prompts(language):
    """Display sample prompts for reference"""
    if language == "English":
        st.markdown("### Sample English Prompt")
        st.code("""Create a moderate level question paper for Class 10 Science on the topic of 'Light - Reflection and Refraction'. Include the following types of questions:
- 10 Objective (MCQ) questions
- 5 Short Answer questions
- 3 Long Answer questions
- 4 Diagram Based questions

The question paper should be designed for 90 minutes and for a total of 80 marks.

Please format the question paper properly with sections, question numbers, and marks distribution. Include clear instructions for students at the beginning.""")
    else:
        st.markdown("### ‡§®‡§Æ‡•Ç‡§®‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü")
        st.code("""‡§ï‡§ï‡•ç‡§∑‡§æ 10 ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡§æ ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•ç‡§§‡§∞ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç ‡§µ‡§ø‡§∑‡§Ø '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ - ‡§™‡§∞‡§æ‡§µ‡§∞‡•ç‡§§‡§® ‡§î‡§∞ ‡§Ö‡§™‡§µ‡§∞‡•ç‡§§‡§®' ‡§™‡§∞‡•§ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç:
- 10 ‡§¨‡§π‡•Å‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®
- 5 ‡§≤‡§ò‡•Å ‡§â‡§§‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®
- 3 ‡§¶‡•Ä‡§∞‡•ç‡§ò ‡§â‡§§‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®
- 4 ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®

‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§§‡•ç‡§∞ 90 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§î‡§∞ ‡§ï‡•Å‡§≤ 80 ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§

‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡§§‡•ç‡§∞ ‡§ï‡•ã ‡§ñ‡§Ç‡§°‡•ã‡§Ç, ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§Ö‡§Ç‡§ï ‡§µ‡§ø‡§§‡§∞‡§£ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§â‡§ö‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§""")

if __name__ == "__main__":
    main()